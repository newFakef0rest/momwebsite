/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 scene.gltf 
Author: melaamory (https://sketchfab.com/melaamory)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hangers-w-clothes-6df08ef8a8504504911ef520cd870aa8
Title: Hangers W Clothes
*/

import { useGLTF } from '@react-three/drei'
import { useRef } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
	nodes: {
		Object_2: THREE.Mesh;
		Object_3: THREE.Mesh;
		Object_4: THREE.Mesh;
		Object_5: THREE.Mesh;
		Object_6: THREE.Mesh;
		Object_7: THREE.Mesh;
		Object_8: THREE.Mesh;
		Object_9: THREE.Mesh;
		Object_10: THREE.Mesh;
		Object_11: THREE.Mesh;
		Object_12: THREE.Mesh;
		Object_13: THREE.Mesh;
		Object_14: THREE.Mesh;
		Object_15: THREE.Mesh;
		Object_16: THREE.Mesh;
		Object_17: THREE.Mesh;
		Object_18: THREE.Mesh;
		Object_19: THREE.Mesh;
		Object_20: THREE.Mesh;
		Object_21: THREE.Mesh;
		Object_22: THREE.Mesh;
		Object_23: THREE.Mesh;
		Object_24: THREE.Mesh;
		Object_25: THREE.Mesh;
		Object_26: THREE.Mesh;
		Object_27: THREE.Mesh;
	};
	materials: {
		Badges1Mtl: THREE.MeshStandardMaterial;
		Banner1Mtl: THREE.MeshStandardMaterial;
		Glass1Mtl: THREE.MeshStandardMaterial;
		Cab1Mtl: THREE.MeshStandardMaterial;
		Chassis1Mtl: THREE.MeshStandardMaterial;
		Lights1Mtl: THREE.MeshStandardMaterial;
		Bodywork1Mtl: THREE.MeshStandardMaterial;
		BodyworkL21Mtl: THREE.MeshStandardMaterial;
		Cupper1Mtl: THREE.MeshStandardMaterial;
		Disc1Mtl: THREE.MeshStandardMaterial;
		Caliper1Mtl: THREE.MeshStandardMaterial;
		Hub1Mtl: THREE.MeshStandardMaterial;
		Meshpart2Mtl: THREE.MeshStandardMaterial;
		Meshpart3Mtl: THREE.MeshStandardMaterial;
		Meshpart1Mtl: THREE.MeshStandardMaterial;
		Misc1Mtl: THREE.MeshStandardMaterial;
		Meshpart4Mtl: THREE.MeshStandardMaterial;
		Springtop1Mtl: THREE.MeshStandardMaterial;
		Upperarm1Mtl: THREE.MeshStandardMaterial;
		Upperarmb1Mtl: THREE.MeshStandardMaterial;
	};
};

export function Scene(props: JSX.IntrinsicElements['group']) {
	const { nodes, materials } = useGLTF('/scene.gltf') as GLTFResult
	const groupRef = useRef<THREE.Group>(null)
	
	// useFrame((_state, delta) => {
	// 	if (groupRef.current) {
	// 		// groupRef.current.rotation.z += delta * 0.0025 // Вращаем модель вокруг оси Y
	// 		// groupRef.current.rotation.x += delta * 0.0025
	// 		groupRef.current.rotation.y += delta * 0.0025
	// 	}
	// })
	
	return (
		<group ref={groupRef}  {...props} dispose={null}>
			<group rotation={[-Math.PI / 2, 0, 0]}>
				<mesh castShadow receiveShadow geometry={nodes.Object_2.geometry} material={materials.Badges1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_3.geometry} material={materials.Banner1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_4.geometry} material={materials.Glass1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_5.geometry} material={materials.Cab1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_6.geometry} material={materials.Chassis1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_7.geometry} material={materials.Lights1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_8.geometry} material={materials.Bodywork1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_9.geometry} material={materials.Bodywork1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_10.geometry} material={materials.BodyworkL21Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_11.geometry} material={materials.BodyworkL21Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_12.geometry} material={materials.Cupper1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_13.geometry} material={materials.Disc1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_14.geometry} material={materials.Caliper1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_15.geometry} material={materials.Hub1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_16.geometry} material={materials.Meshpart2Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_17.geometry} material={materials.Meshpart2Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_18.geometry} material={materials.Meshpart2Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_19.geometry} material={materials.Meshpart2Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_20.geometry} material={materials.Meshpart3Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_21.geometry} material={materials.Meshpart1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_22.geometry} material={materials.Misc1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_23.geometry} material={materials.Misc1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_24.geometry} material={materials.Meshpart4Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_25.geometry} material={materials.Springtop1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_26.geometry} material={materials.Upperarm1Mtl} />
				<mesh castShadow receiveShadow geometry={nodes.Object_27.geometry} material={materials.Upperarmb1Mtl} />
			</group>
		</group>
	)
}

useGLTF.preload('/scene.gltf')


// import { useGLTF } from '@react-three/drei'
// import { useFrame } from '@react-three/fiber'
// import { useRef } from 'react'
// import type { Object3DEventMap } from 'three'
// import * as THREE from 'three'
// import { GLTF } from 'three-stdlib'
//
// type GLTFResult = GLTF & {
//   nodes: {
//     Object_2: THREE.Mesh;
//     Object_3: THREE.Mesh;
//     Object_4: THREE.Mesh;
//     Object_5: THREE.Mesh;
//   };
//   materials: {
//     Pocket_FRONT_7674: THREE.MeshStandardMaterial;
//     Material7471: THREE.MeshStandardMaterial;
//     Tshirt_FRONT_7678: THREE.MeshStandardMaterial;
//     Waist_Belt_FRONT_7670: THREE.MeshStandardMaterial;
//   };
// };
//
// export function Model(props: JSX.IntrinsicElements["group"]) {
//   const meshRef = useRef<THREE.Group<Object3DEventMap>>(null);
//   const { nodes, materials } = useGLTF("/scene.gltf") as GLTFResult;
//
//   useFrame((_state, delta) => {
//     if (meshRef.current) {
//       meshRef.current.position.y += delta;
//     }
//   });
//
//   return (
//     <group {...props} dispose={null}>
//       <group ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>
//         <mesh
//           geometry={nodes.Object_2.geometry}
//           material={materials.Pocket_FRONT_7674}
//         />
//         <mesh
//           geometry={nodes.Object_3.geometry}
//           material={materials.Material7471}
//         />
//         <mesh
//           geometry={nodes.Object_4.geometry}
//           material={materials.Tshirt_FRONT_7678}
//         />
//         <mesh
//           geometry={nodes.Object_5.geometry}
//           material={materials.Waist_Belt_FRONT_7670}
//         />
//       </group>
//     </group>
//   );
// }
//
// useGLTF.preload("/scene.gltf");
